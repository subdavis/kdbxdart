import 'blake2.dart';

/**
 * Argon2 hash
 * @param {ArrayBuffer} password
 * @param {ArrayBuffer} salt
 * @param {Number} memory - memory in KiB
 * @param {Number} iterations - number of iterations
 * @param {Number} length - hash length
 * @param {Number} parallelism - threads count (threads will be emulated if they are not supported)
 * @param {Number} type - 0 = argon2d, 1 = argon2i
 * @param {Number} version - 0x10 or 0x13
 * @returns {Promise.<ArrayBuffer>}
 */

// Inputs:
//     password (P):       Bytes (0..232-1)    Password (or message) to be hashed
//     salt (S):           Bytes (8..232-1)    Salt (16 bytes recommended for password hashing)
//     parallelism (p):    Number (1..224-1)   Degree of parallelism (i.e. number of threads)
//     tagLength (T):      Number (4..232-1)   Desired number of returned bytes
//     memorySizeKB (m):   Number (8p..232-1)  Amount of memory (in kibibytes) to use
//     iterations (t):     Number (1..232-1)   Number of iterations to perform
//     version (v):        Number (0x13)      The current version is 0x13 (19 decimal)
//     key (K):            Bytes (0..232-1)    Optional key (Errata: PDF says 0..32 bytes, RFC says 0..232 bytes)
//     associatedData (X): Bytes (0..232-1)    Optional arbitrary extra data
//     hashType (y):       Number (0=Argon2d, 1=Argon2i, 2=Argon2id)
//  Output:
//     tag:                Bytes (tagLength)   The resulting generated bytes, tagLength bytes long

class Argon2 {


}